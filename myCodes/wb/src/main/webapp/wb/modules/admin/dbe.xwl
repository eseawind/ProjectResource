{"title":"数据库浏览器","inframe":false,"hidden":false,"roles":{"demo":1},"pageLink":"","children":[{"configs":{"itemId":"module"},"events":{"finalize":"app.loadApp();","initialize":"//私有方法定义\nfunction setCard(card) {\n  if (card instanceof Ext.grid.Panel)\n    card.grid = card;\n  else {\n    card.grid = card.down('grid');\n    card.store = card.grid.store;\n  }\n  card.store.mask = card;\n  card.store.card = card;\n  var toolbar = card.grid.down('toolbar');\n  toolbar.insert(toolbar.items.length - 2, ['-', {\n    xtype: 'tbtext',\n    itemId: 'hintLabel',\n    text: ''\n  }]);\n  card.mon(card, 'close', function(card) {\n    var request = card.store.lastRequest;\n    if (request) {\n      var xhr = request.xhr;\n      if (xhr) {\n        card.notShowError = true;\n        xhr.abort();\n      }\n    }\n  });\n  card.hintLabel = toolbar.getComponent('hintLabel');\n  app.tab.setActiveTab(card);\n}\n\nfunction getStore(isSql) {\n    return {\n      url: 'm?xwl=admin/dbe/execute',\n      timeout: -1,\n      showError: false,\n      remoteSort: !isSql,\n      message: '正在执行SQL...',\n      listeners: {\n        beforeload: function() {\n          var store = this,\n            card = store.card;\n          if (!isSql && card.isModified) {\n            Wb.choose('表 \"' + card.table + '\" 已经被修改，保存所做的更改吗？',\n              function(btn) {\n                if (btn == 'yes')\n                  app.save(false, function() {\n                    store.reload();\n                  });\n                else if (btn == 'no') {\n                  Wb.unModified(card);\n                  store.reload();\n                }\n              });\n            return false;\n          }\n          card.hintLabel.setText('执行中...');\n        },\n        loadraw: function(store, response, succ) {\n          if (!succ) {\n            var card = store.card;\n            if (!card.notShowError) {\n              Wb.except(response, function() {\n                if (store.card.editor)\n                  setTimeout(function() {\n                    store.card.editor.focus();\n                  }, 20);\n              });\n            }\n          }\n        },\n        failure: function(store) {\n          store.card.hintLabel.setText('');\n        },\n        success: function(store) {\n          var card = store.card;\n          if (card.lastSql != card.sql) {\n            var cellediting,\n              columns = Wb.getColumns(store);\n            if (!card.isSql) {\n              cellediting = card.grid.findPlugin('cellediting');\n              if (cellediting && cellediting.editors) {\n                cellediting.editors.each(Ext.destroy, Ext);\n                cellediting.editors.clear();\n              }\n            }\n            app.setColumns(columns, card);\n            card.grid.reconfigure(null, columns);\n            card.lastSql = card.sql;\n          }\n          card.hintLabel.setText('耗时：' + store.proxy.reader.rawData.elapsed + ' ms');\n          if (card.isSql) {\n            var sqlStore = app.sqlGrid.store,\n              rec = Wb.find(sqlStore, 'sql', card.sql);\n            if (rec)\n              sqlStore.remove(rec);\n            sqlStore.insert(0, {\n              sql: card.sql\n            });\n            card.grid.setDisabled(false);\n          }\n        }\n      }\n    };\n  }\n  //公有方法\nExt.apply(app, {\n  //服务端使用事务\n  useTrans: true,\n  //添加新的SQL tab页\n  newSql: function(jndi, text) {\n    if (!app.sqlIndex)\n      app.sqlIndex = 0;\n    app.sqlIndex++;\n    var card;\n    card = app.tab.add({\n      title: 'SQL' + app.sqlIndex + (text == 'default' ? '' : (' - ' + text)),\n      jndi: jndi,\n      iconCls: 'sql_icon',\n      closable: true,\n      isSql: true,\n      layout: 'border',\n      items: [{\n        itemId: 'sqlPanel',\n        xtype: 'container',\n        html: '<textarea><\/textarea>',\n        region: 'north',\n        height: 120,\n        split: true,\n        listeners: {\n          resize: function(panel, width, height) {\n            if (panel.editor && !panel.destroying) {\n              Ext.fly(panel.editor.getScrollerElement()).setHeight(height);\n              panel.editor.refresh();\n            }\n          },\n          afterrender: {\n            single: true,\n            fn: function(panel) {\n              panel.editor = CodeMirror.fromTextArea(panel.el.down('textarea', true), {\n                lineNumbers: true,\n                mode: 'text/x-sql',\n                matchBrackets: true,\n                extraKeys: {\n                  \"Ctrl-Enter\": function() {\n                    app.runSqlBtn.fireEvent('click');\n                  },\n                  \"Ctrl-H\": function() {\n                    app.sqlHisBtn.fireEvent('click');\n                  }\n                }\n              });\n              panel.ownerCt.editor = panel.editor;\n            }\n          }\n        }\n      }, {\n        xtype: 'grid',\n        region: 'center',\n        border: false,\n        loadColumns: 'none',\n        disabled: true,\n        store: getStore(true),\n        viewConfig: {\n          enableTextSelection: true\n        }\n      }],\n      listeners: {\n        activate: function(panel) {\n          setTimeout(function() {\n            panel.editor.focus();\n          }, 20);\n        }\n      }\n    });\n    setCard(card);\n    setTimeout(function() {\n      card.editor.focus();\n    }, 20);\n  },\n  showFileDialog: function(callback, isOpen) {\n    Wb.promptFile(callback, {\n      extName: isOpen ? null : '.gz',\n      autoClose: false,\n      forceSelection: isOpen,\n      title: isOpen ? '导入' : '导出',\n      show: isOpen ? function(scope) {\n        app.bbar = scope.win.getDockedItems('toolbar[dock=\"bottom\"]')[0];\n        app.bbar.insert(0, [{\n          xtype: 'checkbox',\n          itemId: 'transCheck',\n          boxLabel: '导入过程使用事务',\n          checked: app.useTrans\n        }, '->']);\n      } : null,\n      hide: isOpen ? function() {\n        app.bbar.remove(app.bbar.items.items[0]);\n        app.bbar.remove(app.bbar.items.items[0]);\n      } : null\n    });\n  },\n  newTable: function(dbName, jndi, table) {\n    var card;\n    app.tab.items.each(function(item) {\n      if (item.table == table && item.jndi == jndi) {\n        card = item;\n        return false;\n      }\n    });\n    if (card)\n      app.tab.setActiveTab(card);\n    else {\n      card = app.tab.add({\n        title: table + (dbName == 'default' ? '' : (' - ' + dbName)),\n        jndi: jndi,\n        isTable: true,\n        sql: 'select * from ' + table,\n        table: table,\n        exportFilename: table,\n        iconCls: 'table_icon',\n        hideMode: 'offsets',\n        closable: true,\n        xtype: 'grid',\n        loadColumns: 'none',\n        downloadBlob: app.downloadBlob,\n        uploadBlob: app.uploadBlob,\n        removeBlob: app.removeBlob,\n        multiSelect: true,\n        editable: true,\n        store: getStore(false),\n        listeners: {\n          beforeclose: function(card) {\n            if (card.isModified) {\n              Wb.choose('表\"' + card.table + '\" 已经被修改，保存所做的更改吗？',\n                function(btn) {\n                  if (btn == 'yes')\n                    app.save(false, function() {\n                      card.close();\n                    });\n                  else if (btn == 'no') {\n                    Wb.unModified(card);\n                    card.close();\n                  }\n                });\n              return false;\n            }\n          },\n          selectionchange: function() {\n            app.setButtons();\n          }\n        }\n      });\n      setCard(card);\n      app.runSql(card, true);\n    }\n  },\n  runSql: function(card, callback) {\n    card.store.load({\n      params: {\n        jndi: card.jndi,\n        sql: card.sql\n      },\n      callback: callback\n    });\n  },\n  autoSize: function(grid) {\n    var cols = grid.columns,\n      i, j = cols.length;\n\n    Ext.suspendLayouts();\n    for (i = 1; i < j; i++) {\n      if (cols[i].autoSize)\n        cols[i].autoSize();\n    }\n    Ext.resumeLayouts(true);\n  },\n  addHisSql: function() {\n    var record, card = app.active();\n    record = app.sqlGrid.getSelection()[0];\n    if (record && card && card.editor)\n      card.editor.setValue(record.get('sql'));\n    app.sqlsWin.close(); //closeAction为hide\n  },\n  active: function() {\n    return app.tab.getActiveTab() || {};\n  },\n  setColumns: function(cols, card) {\n    Wb.each(cols, function(col) {\n      if (col.category == 'blob') {\n        card.hasBlob = true; //如果存在blob强制从服务器下载数据，因为客户端无blob数据\n      }\n      if (col.editor) {\n        //数据库浏览器为编辑原始数据而进行特殊处理，通常情况无需使用这些步骤，直接使用对应类型控件编辑即可\n        col.editor.listeners = {\n          change: app.onChange\n        };\n        switch (col.category) {\n          case 'timestamp':\n          case 'date':\n          case 'time':\n            col.editor.xtype = 'textfield';\n            col.editor.category = col.category;\n            col.editor.validator = app.dateValidator;\n            col.editor.getValue = app.getDate;\n            col.editor.setValue = app.setDate;\n            col.editor.isEqual = app.isEqual; //重载日期时间型比较方法\n            col.renderer = app.dateRenderer;\n            col.scope = col;\n            break;\n        }\n      }\n    });\n  },\n  isEqual: function(date1, date2) {\n    if (Ext.isDate(date1) && Ext.isDate(date2))\n      return date1.getTime() === date2.getTime();\n    return !(date1 || date2);\n  },\n  dateRenderer: function(date) {\n    var str, category = this.category;\n    if (category == 'time')\n      return Wb.format(date, 'H:i:s');\n    else if (category == 'date')\n      return Wb.format(date, 'Y-m-d');\n    else {\n      //timestamp\n      str = Wb.dateToStr(date);\n      if (Ext.String.endsWith(str, '00:00:00.000'))\n        return str.substring(0, 10);\n      else if (Ext.String.endsWith(str, '.000'))\n        return str.substring(0, 19);\n      else return str;\n    }\n  },\n  setDate: function(date) {\n    var me = this,\n      value = app.dateRenderer.call(me, date);\n    me.setRawValue(me.valueToRaw(value));\n    return me.mixins.field.setValue.call(me, value);\n  },\n  getDate: function() {\n    var me = this,\n      val = me.rawToValue(me.processRawValue(me.getRawValue()));\n    me.value = val;\n    return app.checkDate.call(me, val, true) || val;\n  },\n  parseDate: function(value, formats) {\n    if (!value)\n      return null;\n    var date, formatArray = formats.split('|');\n    Wb.each(formatArray, function(item) {\n      date = Ext.Date.parse(value, item);\n      if (date)\n        return false;\n    });\n    if (date)\n      return date;\n    else\n      return null;\n  },\n  //编辑器change事件\n  onChange: function(me) {\n    Wb.setModified(me.up('grid'));\n    app.setButtons();\n  },\n  setButtons: function() {\n    var card = app.active();\n    app.runSqlBtn.setDisabled(!card.isSql);\n    app.addRecordBtn.setDisabled(!card.isTable || card.isSaving);\n    app.delRecordBtn.setDisabled(!card.isTable || !card.getSelection().length || card.isSaving);\n    app.saveBtn.setDisabled(!card.isTable || !card.isModified || card.isSaving);\n    app.saveAllBtn.setDisabled(Wb.getModifiedTitle(app.tab) === null);\n    app.rejectBtn.setDisabled(app.saveBtn.disabled);\n    app.filterBtn.setDisabled(!card.isTable || card.isSaving);\n    app.importBtn.setDisabled(!card.isTable || card.isSaving);\n    app.exportBtn.setDisabled(!card.isSql && !card.isTable);\n    app.propertyBtn.setDisabled(app.exportBtn.disabled);\n  },\n  save: function(isAll, callback) {\n    if (isAll && app.saveAllBtn.disabled || !isAll && app.saveBtn.disabled)\n      return;\n    var active = app.active();\n    if (active.isTable)\n      active.plugins[0].completeEdit();\n    if (!isAll && !Wb.verifyGrid(active)) {\n      return false;\n    }\n    app.tab.items.each(function(card) {\n      if (!card.isModified || card.isSaving)\n        return;\n      if (isAll || active == card) {\n        var store = card.store;\n        card.isSaving = true;\n        Wb.sync({\n          store: store,\n          url: 'm?xwl=admin/dbe/save',\n          mask: card,\n          message: '正在保存中...',\n          params: {\n            table: card.table,\n            jndi: card.jndi\n          },\n          callback: function(a, succ) {\n            card.isSaving = false;\n            if (succ) {\n              store.commitChanges();\n              Wb.unModified(card);\n              Ext.callback(callback);\n            }\n            app.setButtons();\n          }\n        });\n      }\n    });\n    app.setButtons();\n  },\n  dateValidator: function(value) {\n    var metaType = this.column.metaType;\n    //处理类似Oracle Date类型的bug，表现为返回类型为timestamp但不允许毫秒\n    if (metaType && metaType.toUpperCase() == 'DATE' && value.indexOf('.') != -1)\n      return Wb.format('不允许输入毫秒 \"{0}\"', value);\n    return app.checkDate.call(this, value);\n  },\n  addRecord: function() {\n    if (app.addRecordBtn.disabled) return;\n    var card = app.active();\n    Wb.add(card.grid, {}, 'after', 1, false);\n    Wb.setModified(card);\n    app.setButtons();\n  },\n  delRecord: function() {\n    if (app.delRecordBtn.disabled) return;\n    var card = app.active();\n    Wb.remove(card.grid);\n    Wb.setModified(card);\n    app.setButtons();\n  },\n  reject: function() {\n    if (app.refreshBtn.disabled) return;\n    Wb.confirm('确定要撤消对表格所做的所有更改吗？', function() {\n      var grid = app.active();\n      Wb.reject(grid);\n      Wb.unModified(grid);\n      app.setButtons();\n    });\n  },\n  checkDate: function(value, returnDate) {\n    if (!value)\n      return returnDate ? value : true;\n    var date, time, dateFormats = Ext.form.field.Date.prototype.altFormats,\n      timeFormats = Ext.form.field.Time.prototype.altFormats;\n    if (this.category == 'time') {\n      if ((date = app.parseDate(value, timeFormats)))\n        return returnDate ? date : true;\n    } else if (this.category == 'date') {\n      if ((date = app.parseDate(value, dateFormats)))\n        return returnDate ? date : true;\n    } else {\n      var pos = value.indexOf(' ');\n      if (pos == -1) {\n        if ((date = app.parseDate(value, dateFormats)))\n          return returnDate ? date : true;\n      } else {\n        if ((date = app.parseDate(value.substring(0, pos), dateFormats)) &&\n          (time = app.parseDate(value.substring(pos + 1), timeFormats))) {\n          if (returnDate) {\n            date.setHours(time.getHours());\n            date.setMinutes(time.getMinutes());\n            date.setSeconds(time.getSeconds());\n            date.setMilliseconds(time.getMilliseconds());\n            return date;\n          } else return true;\n        }\n      }\n    }\n    return returnDate ? null : Wb.format('无效的值 \"{0}\"', value);\n  },\n  downloadBlob: function(fieldName, rowIndex) {\n    var grid = this;\n    Wb.download('m?xwl=admin/dbe/download-blob', Ext.apply({\n      __jndi: grid.jndi,\n      __tableName: grid.table,\n      __fieldName: fieldName\n    }, Wb.getData(grid.store.getAt(rowIndex), true)));\n  },\n  uploadBlob: function(fieldName, rowIndex) {\n    var grid = this,\n      rec = grid.store.getAt(rowIndex);\n    if (rec.dirty) {\n      Wb.warn('请保存该记录然后再试一次。');\n      return;\n    }\n    Wb.run({\n      url: 'upload',\n      success: function(app) {\n        app.upload({\n          url: 'm?xwl=admin/dbe/upload-blob',\n          iconCls: 'import_icon',\n          title: '导入 - ' + fieldName,\n          params: Ext.apply({\n            __jndi: grid.jndi,\n            __tableName: grid.table,\n            __fieldName: fieldName\n          }, Wb.getData(rec, true)),\n          success: function() {\n            rec.set(fieldName, 'blob');\n            rec.commit();\n          }\n        });\n      }\n    });\n  },\n  removeBlob: function(fieldName, rowIndex) {\n    var grid = this,\n      rec = grid.store.getAt(rowIndex);\n    if (rec.dirty) {\n      Wb.warn('请保存该记录然后再试一次。');\n      return;\n    }\n    Wb.confirm('确定要删除该记录字段 \u201c' + fieldName + '\u201d 的内容吗？', function() {\n      Wb.request({\n        url: 'm?xwl=admin/dbe/clear-blob',\n        params: Ext.apply({\n          __jndi: grid.jndi,\n          __tableName: grid.table,\n          __fieldName: fieldName\n        }, Wb.getData(rec, true)),\n        success: function(resp) {\n          rec.set(fieldName, '');\n          rec.commit();\n        }\n      });\n    });\n  },\n  loadApp: function() {\n    function render() {\n      if (contextOwner)\n        contextOwner.add(app.viewport1);\n      else\n        new Ext.container.Viewport(app.viewport1);\n    }\n    if (window.CodeMirror)\n      render();\n    else {\n      Wb.addLink(['wb/libs/cm/cmirror.css', 'wb/libs/cm/cmirror.js'],\n        render\n      );\n    }\n  }\n});","beforeunload":"var title = Wb.getModifiedTitle(app.tab, true);\nif (title !== null)\n  return '表' + title + '已经被修改。';"},"children":[{"configs":{"title":"属性","autoShow":"true","height":"450","layout":"@{type:'vbox', align:'stretch'}","width":"650","itemId":"propertyWin","bodyPadding":"8 8 0 8","modal":"true","iconCls":"property_icon","maximizable":"true","createInstance":"false"},"children":[{"configs":{"labelWidth":"80","readOnly":"true","labelAlign":"right","itemId":"tableNameText","padding":"2","fieldLabel":"关联表名","selectOnFocus":"true"},"children":[],"type":"text","expanded":false},{"configs":{"labelWidth":"80","readOnly":"true","labelAlign":"right","itemId":"fieldsText","padding":"2","fieldLabel":"字段列表"},"children":[],"type":"text","expanded":false},{"configs":{"title":"字段属性","layout":"fit","itemId":"fieldset1","padding":"8","flex":"1"},"children":[{"configs":{"pagingBar":"false","itemId":"grid1"},"children":[{"configs":{"itemId":"store","fields":"['dataIndex', 'metaType', 'metaSize', 'metaScale', 'metaRequired']"},"children":[],"type":"store","expanded":false},{"configs":{"enableTextSelection":"true","itemId":"viewConfig"},"children":[],"type":"tableview","expanded":false},{"configs":{"itemId":"columns"},"children":[{"configs":{"xtype":"rownumberer","width":"30","itemId":"noCol"},"children":[],"type":"column","expanded":false},{"configs":{"text":"字段名称","dataIndex":"dataIndex","itemId":"nameCol","renderer":"if (record.get('metaRequired'))\n  return '<b>' + value + '<\/b>';\nelse return value;","flex":"1"},"children":[],"type":"column","expanded":false},{"configs":{"text":"类型","dataIndex":"metaType","itemId":"typeCol"},"children":[],"type":"column","expanded":false},{"configs":{"text":"大小","align":"right","dataIndex":"metaSize","itemId":"sizeCol"},"children":[],"type":"column","expanded":false},{"configs":{"text":"精度","align":"right","width":"70","dataIndex":"metaScale","itemId":"scaleCol"},"children":[],"type":"column","expanded":false},{"configs":{"text":"必填","width":"70","xtype":"booleancolumn","falseText":"否","dataIndex":"metaRequired","itemId":"requiredCol","trueText":"是"},"children":[],"type":"column","expanded":false}],"type":"array","expanded":true}],"type":"grid","expanded":true}],"type":"fieldset","expanded":true}],"type":"window","expanded":false},{"configs":{"title":"SQL历史记录","height":"450","width":"650","layout":"fit","closeAction":"hide","itemId":"sqlsWin","modal":"true","iconCls":"script_icon","maximizable":"true"},"events":{"hide":"var card = app.active();\nif (card && card.editor)\n  setTimeout(function() {\n    card.editor.focus();\n  }, 20);","show":"setTimeout(function() {\n  if (!app.sqlGrid.getSelection().length)\n    app.sqlGrid.setSelection(0);\n  app.sqlGrid.view.focus();\n}, 20);"},"children":[{"configs":{"pagingBar":"false","itemId":"sqlGrid","hideHeaders":"true"},"events":{"itemdblclick":"app.addHisSql();"},"children":[{"configs":{"itemId":"store","fields":"['sql']"},"children":[],"type":"store","expanded":false},{"configs":{"itemId":"viewConfig"},"events":{"cellkeydown":"if (e.getKey() == e.ENTER)\n  app.addHisSql();"},"children":[],"type":"tableview","expanded":false},{"configs":{"itemId":"columns"},"children":[{"configs":{"autoWrap":"true","dataIndex":"sql","itemId":"sqlCol","flex":"1"},"children":[],"type":"column","expanded":false}],"type":"array","expanded":true}],"type":"grid","expanded":true}],"type":"window","expanded":true},{"configs":{"layout":"border","itemId":"viewport1","border":"false","createInstance":"false"},"events":{"afterrender":"Wb.setNavigate(app.tab, app.backBtn, app.forwardBtn);\napp.newSql('default', 'default');\nnew Ext.KeyNav({\n  viewport: app.viewport1,\n  S: {\n    ctrl: true,\n    fn: function(e) {\n      app.save(e.shiftKey);\n    }\n  },\n  E: {\n    ctrl: true,\n    fn: app.addRecord\n  },\n  D: {\n    ctrl: true,\n    fn: app.delRecord\n  }\n});"},"children":[{"configs":{"region":"north","enableOverflow":"true","border":"false","itemId":"toolbar"},"children":[{"configs":{"text":"新建SQL","itemId":"newSqlBtn","iconCls":"sql_icon","tooltip":"添加新的SQL页"},"events":{"click":"var text, jndi, node = app.tableTree.getSelection()[0];\nif (node) {\n  if (node.isLeaf())\n    node = node.parentNode;\n  jndi = node.data.jndi;\n  text = node.data.text;\n} else {\n  jndi = '';\n  text = 'default';\n}\napp.newSql(jndi, text);"},"children":[],"type":"item","expanded":false},{"configs":{"text":"SQL记录","itemId":"sqlHisBtn","iconCls":"script_icon","tooltip":"显示历史记录 (Ctrl+H)"},"events":{"click":"var card = app.active();\nif (!card || !card.editor)\n  Wb.info('请选择一个SQL页面。');\nelse\n  app.sqlsWin.show();"},"children":[],"type":"item","expanded":false},{"configs":{"text":"运行SQL","itemId":"runSqlBtn","iconCls":"run_icon","tooltip":"运行SQL (Ctrl+Enter)"},"events":{"click":"var card = app.active();\nif (card.store.loading)\n  Wb.warn('正在运行SQL中。');\nelse {\n  card.sql = card.editor.getSelection();\n  if (card.sql === '')\n    card.sql = card.editor.getValue();\n  app.runSql(card);\n}"},"children":[],"type":"item","expanded":false},{"configs":{"text":"-","itemId":"line1"},"children":[],"type":"item","expanded":false},{"configs":{"text":"添加","itemId":"addRecordBtn","iconCls":"record_add_icon","tooltip":"添加新的记录 (Ctrl+E)","handler":"app.addRecord"},"children":[],"type":"item","expanded":false},{"configs":{"text":"删除","itemId":"delRecordBtn","iconCls":"record_delete_icon","tooltip":"删除选择的记录 (Ctrl+D)","handler":"app.delRecord"},"children":[],"type":"item","expanded":false},{"configs":{"text":"保存当前","itemId":"saveBtn","iconCls":"save_icon","tooltip":"保存当前修改的表格 (Ctrl+S)"},"events":{"click":"app.save();"},"children":[],"type":"item","expanded":false},{"configs":{"text":"保存全部","itemId":"saveAllBtn","iconCls":"save_all_icon","tooltip":"保存全部修改的表格 (Ctrl+Shift+S)"},"events":{"click":"app.save(true);"},"children":[],"type":"item","expanded":false},{"configs":{"text":"撤消","itemId":"rejectBtn","iconCls":"undo_icon","tooltip":"撤消最后一次保存后的所有更改","handler":"app.reject"},"children":[],"type":"item","expanded":false},{"configs":{"text":"过滤","xtype":"splitbutton","itemId":"filterBtn","iconCls":"filter_icon","tooltip":"对表格数据添加过滤条件表达式"},"events":{"click":"var card = app.active();\nWb.promptText('添加过滤条件表达式', function(value, win) {\n  if (!card.originSql)\n    card.originSql = card.sql;\n  if (value) {\n    card.filterCondi = value;\n    card.sql = card.originSql + ' where ' + value;\n  } else card.sql = card.originSql;\n  app.runSql(card, function(a, b, succ) {\n    delete card.store.lastOptions.callback; //防止store.reload时再调用该回调函数\n    if (succ)\n      win.close();\n  });\n}, {\n  iconCls: 'filter_icon',\n  value: card.filterCondi\n});"},"children":[{"configs":{"text":"重置过滤","itemId":"resetFilterBtn"},"events":{"click":"var card = app.active();\nif (card.originSql && card.originSql != card.sql) {\n  card.sql = card.originSql;\n  app.runSql(card);\n}"},"children":[],"type":"item","expanded":false}],"type":"item","expanded":true},{"configs":{"text":"导出","xtype":"splitbutton","itemId":"exportBtn","iconCls":"db_export_icon"},"events":{"click":"var card = app.active(),\n  store = card.store;\nif (!card.sql) {\n  Wb.warn('无任何数据可导出。');\n  return;\n}\nif (store.getTotalCount() > store.getCount() || card.hasBlob) {\n  //从服务器端取数\n  Wb.download('m?xwl=admin/dbe/export', {\n    sql: card.sql,\n    jndi: card.jndi,\n    filename: card.isSql ? 'data.gz' : card.table + '.gz'\n  });\n} else {\n  //从客户端取数\n  var rows = [];\n  store.each(function(rec) {\n    rows.push(Wb.encode(rec.data));\n  });\n  Wb.download('get-file', {\n    data: rows.join('\\n'),\n    gzip: true,\n    filename: card.isSql ? 'data.gz' : card.table + '.gz'\n  }, true);\n}"},"children":[{"configs":{"text":"导出到服务器...","itemId":"exportServerBtn","iconCls":"server_icon"},"events":{"click":"var card = app.active(),\n  store = card.store;\nif (!card.sql) {\n  Wb.warn('无任何数据可导出。');\n  return;\n}\napp.showFileDialog(function(filename, win) {\n  if (store.getTotalCount() > store.getCount() || card.hasBlob) {\n    //从服务器端取数\n    Wb.request({\n      url: 'm?xwl=admin/dbe/exportToServer',\n      timeout: -1,\n      params: {\n        sql: card.sql,\n        jndi: card.jndi,\n        filename: filename\n      },\n      success: function() {\n        win.close();\n      }\n    });\n  } else {\n    //从客户端取数\n    var rows = [];\n    store.each(function(rec) {\n      rows.push(Wb.encode(rec.data));\n    });\n    Wb.request({\n      url: 'm?xwl=admin/dbe/write-file',\n      timeout: -1,\n      params: {\n        data: rows.join('\\n'),\n        gzip: true,\n        filename: filename\n      },\n      success: function() {\n        win.close();\n      }\n    });\n  }\n});"},"children":[],"type":"item","expanded":false}],"type":"item","expanded":true},{"configs":{"text":"导入","xtype":"splitbutton","itemId":"importBtn","iconCls":"db_import_icon"},"events":{"click":"var card = app.active();\nWb.run({\n  url: 'upload',\n  success: function(app) {\n    app.upload({\n      url: 'm?xwl=admin/dbe/import',\n      iconCls: 'import_icon',\n      title: '导入 - ' + card.table,\n      showProgress: false,\n      params: {\n        jndi: card.jndi,\n        table: card.table\n      },\n      beforeUpload: function() {\n        var ext = app.file.getValue().toLowerCase(),\n          endsWith = Ext.String.endsWith;\n        if (!endsWith(ext, '.gz') && !endsWith(ext, '.txt') &&\n          !endsWith(ext, '.xls') && !endsWith(ext, '.xlsx')) {\n          Wb.warn('请选择一个gz、txt或Excel格式的文件。');\n          return false;\n        }\n      },\n      success: function() {\n        card.store.reload();\n      }\n    });\n    app.win.setHeight(app.win.getHeight() + 30);\n    app.form1.add({\n      xtype: 'checkbox',\n      boxLabel: '导入过程使用事务',\n      checked: true,\n      itemId: 'trans',\n      x: 92,\n      y: 56\n    });\n  }\n});"},"children":[{"configs":{"text":"从服务器导入...","itemId":"importServerBtn","iconCls":"server_icon"},"events":{"click":"app.showFileDialog(function(filename, win) {\n  var ext = filename.toLowerCase(),\n    endsWith = Ext.String.endsWith;\n  if (!endsWith(ext, '.gz') && !endsWith(ext, '.txt') &&\n    !endsWith(ext, '.xls') && !endsWith(ext, '.xlsx')) {\n    Wb.warn('请选择一个gz、txt或Excel格式的文件。');\n    return false;\n  }\n  var card = app.active();\n  app.useTrans = win.down('#transCheck').getValue();\n  Wb.request({\n    url: 'm?xwl=admin/dbe/import',\n    params: {\n      jndi: card.jndi,\n      table: card.table,\n      fromServer: true,\n      trans: app.useTrans,\n      filename: filename\n    },\n    success: function() {\n      win.close();\n      card.store.reload();\n    }\n  });\n}, true);"},"children":[],"type":"item","expanded":false}],"type":"item","expanded":true},{"configs":{"text":"-","itemId":"line"},"children":[],"type":"item","expanded":false},{"configs":{"overflowText":"属性","itemId":"propertyBtn","iconCls":"property_icon","tooltip":"显示当前页面字段详细信息"},"events":{"click":"var card = app.active();\nif (!app.tab.getActiveTab())\n  Wb.warn('当前无可用数据。');\nelse if (card.store.loading)\n  Wb.warn('正在执行SQL。');\nelse if (card.store.proxy.reader.rawData) {\n  var win = new Ext.window.Window(app._propertyWin),\n    grid = win.down('#grid1'),\n    cols = card.store.proxy.reader.rawData.columns;\n  grid.store.loadData(cols);\n  grid.store.removeAt(0);\n  //app.tableNameText对象每次均指向最新创建的控件，也可使用win.getComponent方法\n  app.tableNameText.setValue(card.isSql ? '(SQL)' : card.table);\n  app.fieldsText.setValue(Ext.Array.pluck(cols, 'dataIndex').join(', ').substring(2));\n} else\n  Wb.warn('表格无数据。');"},"children":[],"type":"item","expanded":false},{"configs":{"overflowText":"后退","itemId":"backBtn","iconCls":"left_icon","tooltip":"转到上一个页面"},"children":[],"type":"item","expanded":false},{"configs":{"overflowText":"前进","itemId":"forwardBtn","iconCls":"right_icon","tooltip":"转到后退前的页面"},"children":[],"type":"item","expanded":false},{"configs":{"overflowText":"自动宽度","itemId":"autoWidthBtn","iconCls":"table_align_columns_icon","tooltip":"自动设置列宽度"},"events":{"click":"var grid = app.active().grid;\nif (grid && grid.columns) {\n  Ext.suspendLayouts();\n  app.autoSize(grid);\n  var col, i, j = grid.columns.length;\n  for (i = 1; i < j; i++) {\n    col = grid.columns[i];\n    //基于Neptune的系列主题同其他主题存在字体大小差异，进行微调\n    col.setWidth(col.width + (Wb.isNeptune ? 15 : 10));\n  }\n  Ext.resumeLayouts(true);\n}"},"children":[],"type":"item","expanded":false}],"type":"toolbar","expanded":true},{"configs":{"region":"west","rootVisible":"false","title":"数据库列表","plugins":"{ptype:'bufferedrenderer'}","collapsible":"true","width":"200","split":"true","itemId":"tableTree","iconCls":"db_icon"},"events":{"itemclick":"/*\n点击表名打开表；\n点击数据库名打开指定数据库首个SQL页；\n在SQL页Ctrl+点击数据库或表名在SQL窗口添加点击的文本；\n*/\nvar dbNode, found, card = app.active(),\n  isLeaf = record.isLeaf();\nif (isLeaf)\n  dbNode = record.parentNode;\nelse\n  dbNode = record;\nif (card && card.isSql && e.ctrlKey) {\n  card.editor.replaceSelection(record.data.text);\n  setTimeout(function() {\n    card.editor.focus();\n  }, 20);\n} else if (isLeaf) {\n  app.newTable(dbNode.data.text, dbNode.data.jndi, record.data.text);\n} else {\n  found = false;\n  app.tab.items.each(function(card) {\n    if (card.isSql && card.jndi == record.data.jndi) {\n      app.tab.setActiveTab(card);\n      found = true;\n      return false;\n    }\n  });\n  if (!found)\n    app.newSql(record.data.jndi, record.data.text);\n}"},"children":[{"configs":{"params":"{hasSchem:'{#Var.sys.db.tableSchemPrefix#}'=='true'}","itemId":"store","url":"m?xwl=admin/dbe/get-tree","fields":"['text', 'jndi', 'schem', 'table']"},"events":{"beforeload":"operation.params.jndi = operation.node.data.jndi;"},"children":[],"type":"treestore","expanded":false},{"configs":{"itemId":"tools"},"children":[{"configs":{"tooltype":"refresh","itemId":"refreshBtn","tooltip":"刷新"},"events":{"click":"Wb.reload(app.tableTree);"},"children":[],"type":"item","expanded":false},{"configs":{"tooltype":"gear","itemId":"setBtn","tooltip":"切换表名前Schem"},"events":{"click":"var hasSchem = !app.tableTree.store.params.hasSchem;\napp.tableTree.store.params.hasSchem = hasSchem;\nExt.suspendLayouts();\napp.tableTree.getRootNode().cascadeBy(function(node) {\n  if (node.isLeaf()) {\n    node.set('text', hasSchem && !Wb.isEmpty(node.data.schem) ?\n      (node.data.schem + '.' + node.data.table) : node.data.table);\n    node.commit();\n  }\n});\nExt.resumeLayouts(true);"},"children":[],"type":"item","expanded":false}],"type":"array","expanded":true}],"type":"tree","expanded":true},{"configs":{"region":"center","bodyStyle":"background-color:#787878;","plugins":"'tabreorderer'","itemId":"tab"},"events":{"tabchange":"app.setButtons();","remove":"app.setButtons();"},"children":[],"type":"tab","expanded":true}],"type":"viewport","expanded":true}],"type":"module","expanded":true}],"iconCls":"db_icon"}